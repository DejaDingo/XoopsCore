<?php
namespace Xmf;

require_once(dirname(__FILE__).'/../../init_new.php');

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-05-22 at 19:56:36.
 */

/**
* PHPUnit special settings :
* @backupGlobals disabled
* @backupStaticAttributes disabled
*/

class FilterInputTest extends \PHPUnit\Framework\TestCase
{
    /**
     * @var FilterInput
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = FilterInput::getInstance();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Xmf\FilterInput::getInstance
     * @todo   Implement testGetInstance().
     */
    /**
     * @covers Xmf\FilterInput::getInstance
     */
    public function testGetInstance()
    {
        $this->assertInstanceOf('\Xmf\FilterInput', $this->object);

        $instance = FilterInput::getInstance();
        $this->assertSame($instance, $this->object);

        $instance = FilterInput::getInstance(array(), array(), 0, 0, 0);
        $this->assertNotSame($instance, $this->object);
    }

    /**
     * @covers Xmf\FilterInput::process
     */
    public function testProcess()
    {
        $input = 'Lorem ipsum </i><script>alert();</script>';
        $expected = 'Lorem ipsum alert();';
        $this->assertEquals($expected, $this->object->process($input));

        $input = 'Lorem ipsum';
        $this->assertEquals($input, $this->object->process($input));
    }

    /**
     * @covers Xmf\FilterInput::clean
     */
    public function testClean()
    {
        $input = 'Lorem ipsum </i><script>alert();</script>';
        $expected = 'Lorem ipsum alert();';
        $this->assertEquals($expected, FilterInput::clean($input, 'string'));

        $input = 'Lorem ipsum &#x3C;&#x73;&#x63;&#x72;&#x69;&#x70;&#x74;&#x3E;&#x61;&#x6C;&#x65;&#x72;&#x74;&#x28;&#x29;&#x3B;&#x3C;&#x2F;&#x73;&#x63;&#x72;&#x69;&#x70;&#x74;&#x3E;';
        $expected = 'Lorem ipsum alert();';
        $this->assertEquals($expected, FilterInput::clean($input, 'string'), FilterInput::clean($input, 'string'));

        $input = 'Lorem ipsum';
        $expected = $input;
        $this->assertEquals($expected, FilterInput::clean($input, 'string'));
    }

    /**
     * @covers Xmf\FilterInput::cleanVar
     */
    public function testCleanVarDefault()
    {
        $filter = FilterInput::getInstance();
        $safeTest = '<p>This is a <em>simple</em> test.</p>';
        $this->assertEquals('This is a simple test.', $filter->cleanVar($safeTest));
    }

    /**
     * @covers Xmf\FilterInput::cleanVar
     */
    public function testCleanVarFilter()
    {
        $filter = FilterInput::getInstance(array(), array(), 1, 1);

        $safeTest = '<p>This is a <em>simple</em> test.</p>';
        $this->assertEquals($safeTest, $filter->cleanVar($safeTest));
    }

    /**
     * @covers Xmf\FilterInput::cleanVar
     */
    public function testCleanVarFilterXss()
    {
        $filter = FilterInput::getInstance(array(), array(), 1, 1);

        $xssTest = '<p>This is a <em>xss</em> <script>alert();</script> test.</p>';
        $xssTestExpect = '<p>This is a <em>xss</em> alert(); test.</p>';
        $this->assertEquals($xssTestExpect, $filter->cleanVar($xssTest));
    }

    /**
     * @covers Xmf\FilterInput::gather
     */
    public function testGather()
    {
        $specs = array(
            array('op', 'string'),
            array('ok', 'boolean', false, false),
            array('str', 'word', 'something', true, 5),
        );

        unset($_POST['op']);
        unset($_POST['ok']);
        $clean_input = FilterInput::gather('post', $specs, 'op');
        $this->assertFalse($clean_input);

        $_POST['op'] = 'test';
        $clean_input = FilterInput::gather('post', $specs, 'op');
        $this->assertEquals('test', $clean_input['op']);
        $this->assertFalse($clean_input['ok']);
        $this->assertEquals('somet', $clean_input['str']);

        unset($_POST['op']);
        $_POST['ok'] = '1';
        $_POST['str'] = '  fred! ';
        $clean_input = FilterInput::gather('post', $specs);
        $this->assertEquals('', $clean_input['op']);
        $this->assertTrue($clean_input['ok']);
        $this->assertEquals('fred', $clean_input['str'], $clean_input['str']);

        unset($_POST['op']);
        unset($_POST['ok']);
        unset($_POST['str']);
    }
}
